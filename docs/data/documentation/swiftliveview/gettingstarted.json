{"hierarchy":{"paths":[["doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/GettingStarted"},"abstract":[{"text":"Say hello to the world! Create your first interactive website hassle(JavaScript) free!","type":"text"}],"variants":[{"paths":["\/documentation\/swiftliveview\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This article showcases how you can use "},{"identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView","isActive":true,"type":"reference"},{"type":"text","text":" framework to create interactive server side renderend website as fast as possible. This article skips some information about configuration and component details. To further explore these parts of framework follow up with "},{"identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/Configuration","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/Component","isActive":true},{"text":". This demo project is available ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/usmansc\/swiftliveview-demo?tab=readme-ov-file","isActive":true},{"text":".","type":"text"}]},{"level":3,"anchor":"Project-setup","text":"Project setup","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"From termminal inside your desired directory create new Vapor project."}]},{"syntax":null,"code":["vapor new swiftliveview-demo -n"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This will give us basic template for Vapor project. Open your "},{"code":"Package.swift","type":"codeVoice"},{"text":" file and proceed to the next step.","type":"text"}],"type":"paragraph"},{"anchor":"SwiftPM","type":"heading","text":"SwiftPM","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"Include "},{"isActive":true,"identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView","type":"reference"},{"type":"text","text":" package in your "},{"type":"codeVoice","code":"Package.swift"},{"text":". Optionally as the source below shows you can choose to include templating language of your choice. Here we have both ","type":"text"},{"type":"codeVoice","code":"Leaf"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Tokamak"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First to dependencies:"}]},{"syntax":"swift","type":"codeListing","code":["dependencies: [","    .package(url: \"https:\/\/github.com\/vapor\/vapor.git\", from: \"4.0.0\"),","    .package(url: \"https:\/\/github.com\/vapor\/leaf.git\", from: \"4.0.0\"),","    .package(url: \"https:\/\/github.com\/TokamakUI\/TokamakVapor.git\", branch: \"main\"),","    .package(url: \"https:\/\/github.com\/usmansc\/swiftliveview.git\", branch: \"main\")","]"]},{"type":"paragraph","inlineContent":[{"text":"and then target:","type":"text"}]},{"code":[".target(","    name: \"App\",","    dependencies: [","        .product(name: \"Vapor\", package: \"vapor\"),","        .product(name: \"Leaf\", package: \"leaf\"), ","        .product(name: \"TokamakVapor\", package: \"TokamakVapor\"),","        .product(name: \"SwiftLiveView\", package: \"SwiftLiveView\")","    ],","    swiftSettings: [","        .unsafeFlags([\"-cross-module-optimization\"], .when(configuration: .release))","    ]","),"],"syntax":"swift","type":"codeListing"},{"text":"Private and public keys","level":4,"type":"heading","anchor":"Private-and-public-keys"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both key pairs has to be supplied to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/LiveViewHandler"},{"type":"text","text":" as "},{"code":"String","type":"codeVoice"},{"type":"text","text":"s. You can follow "},{"identifier":"https:\/\/kentakodashima.medium.com\/generate-pem-keys-with-openssl-on-macos-ecac55791373","type":"reference","isActive":true},{"type":"text","text":" article to generate get "},{"type":"codeVoice","code":"PEM"},{"type":"text","text":" formatted keys. Signer is expecting them to be in "},{"code":"rs256","type":"codeVoice"},{"type":"text","text":" format."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As general rule of thumb you can use following command to export your public key to "},{"type":"codeVoice","code":"PEM"},{"type":"text","text":" format. Following code was taken from "},{"type":"reference","identifier":"https:\/\/serverfault.com\/a\/706412","isActive":true},{"text":" post.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["ssh-keygen -f id_rsa.pub -m 'PEM' -e > id_rsa.pub.pem"]},{"inlineContent":[{"text":"Then simply copy the .pem key as necessary.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Options as follows: (See man ssh-keygen)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"-f id_rsa.pub: input file"},{"text":" ","type":"text"},{"text":"-m ‘PEM’: output format PEM","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"-e: output to STDOUT"}]},{"type":"heading","level":4,"text":"Routes","anchor":"Routes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Having public and private keys in "},{"type":"codeVoice","code":"PEM"},{"type":"text","text":" format you can define your app routes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One to provide "},{"code":"JWT","type":"codeVoice"},{"text":" tokens and one to handle ","type":"text"},{"code":"webSocket","type":"codeVoice"},{"type":"text","text":" connections."}]},{"type":"paragraph","inlineContent":[{"text":"Your ","type":"text"},{"code":"routes.swift","type":"codeVoice"},{"text":" file should look like this.","type":"text"}]},{"code":["import Vapor","import SwiftLiveView","","func routes(_ app: Application) throws {","    app.get(\"api\", \"issue-token\") { req async throws -> String in","        try TokenGenerator.generateToken(app)","    }","","    let handler: LiveViewHandler<ClientMessage> = app.liveViewHandler()","    app.webSocket(\"websocket\", onUpgrade: handler.handleWebsocket)","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"Templates","text":"Templates","level":4},{"inlineContent":[{"text":"Now lets create two templates.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"One in "},{"code":"Tokamak","type":"codeVoice"},{"text":" and one in ","type":"text"},{"code":"Leaf","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Create new directory under ","type":"text"},{"type":"codeVoice","code":"Sources\/App"},{"text":" and name it ","type":"text"},{"code":"Views","type":"codeVoice"},{"type":"text","text":". In it create "},{"type":"codeVoice","code":"IvalidPath.swift"},{"text":" file. Under your ","type":"text"},{"type":"codeVoice","code":"Package"},{"type":"text","text":" create directory "},{"type":"codeVoice","code":"Resources\/Views"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"index.leaf"},{"type":"text","text":" file."}]},{"inlineContent":[{"code":"InvalidPath.swift","type":"codeVoice"},{"type":"text","text":" should look something like this and will be used to present users with warning, that they entered invalid path."}],"type":"paragraph"},{"type":"codeListing","code":["import TokamakVapor","","\/\/\/ Invalid path representation","struct InvalidPath: TokamakVapor.View {","    var body: some TokamakVapor.View {","        VStack {","            Text(\"Sorry, could not find this URL\")","                .foregroundColor(.red)","            Text(\"Try again with different path...\")","                .foregroundColor(.black)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"index.leaf"},{"text":" should look like this","type":"text"}]},{"code":["<!DOCTYPE html>","<html lang=\"en\">","<head>","    <meta charset=\"UTF-8\">","    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">","    <title>Demo counter<\/title>","<\/head>","<body>","    <main>","        <h1>Counter is: <span id=\"counterLabel\"><\/span><h1>","        <button live-action=\"increment\" id=\"increment\">+<\/button>","        <button live-action=\"decrement\" id=\"decrement\">-<\/button>","    <\/main>","<\/body>","<\/html>",""],"type":"codeListing","syntax":"html"},{"inlineContent":[{"type":"text","text":"in this file we create two button with "},{"code":"live-action","type":"codeVoice"},{"type":"text","text":" parameter and "},{"code":"id","type":"codeVoice"},{"text":". This ","type":"text"},{"code":"live-action","type":"codeVoice"},{"text":" parameter name will be important in our ","type":"text"},{"type":"codeVoice","code":"Component"}],"type":"paragraph"},{"type":"heading","text":"Component","anchor":"Component","level":4},{"inlineContent":[{"type":"text","text":"Under "},{"type":"codeVoice","code":"Sources\/App\/Controllers"},{"text":" create new file named ","type":"text"},{"type":"codeVoice","code":"IndexComponent.swift"},{"type":"text","text":". This component\/controller will handle request from "},{"type":"codeVoice","code":"index.leaf"},{"text":" view.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Your file should look like this"}]},{"syntax":"swift","code":["import Vapor","import SwiftLiveView","import Combine","","class IndexComponent: LiveRoutableComponent {","    var app: Vapor.Application","    var path: String","    var webSocket: WebSocket?","    var counter = 0 {","        didSet {","            guard let webSocket else { return }","            self.sendUpdate(via: webSocket, content: BaseServerMessage(value: \"\\(counter)\", action: .updateNodeValue(target: \"counterLabel\")))","        }","    }","","    init(app: Vapor.Application, path: String, webSocket: WebSocket? = nil) {","        self.app = app","        self.path = path","        self.webSocket = webSocket","    }","","    \/\/\/ Helper method to render leaf template","    private func renderView(_ app: Application, template: String) async throws -> String {","        let view = try await app.view.render(template).get()","        let buff = view.data","        return String(buffer: buff)","    }","","    \/\/\/ Protocol required method to render base template for component","    func baseTemplate() async throws -> String {","        try await renderView(app, template: \"index.leaf\")","    }","    ","    \/\/\/ Protocol required method to handle incoming messages","    func receiveMessage<ClientMessageType: ClientMessageDecodable>(from ws: WebSocket, message: ClientMessageType) {","        \/\/ Typecast incoming message to our typealiased message from `configure.swift`","        guard let message = message as? ClientMessage else { return }","        switch message.action {","        case .live_action:","            guard let target = LiveActionCall(rawValue: message.value ?? \"\") else { return }","            switch target {","            case .increment:","                counter += 1","            case .decrement:","                counter -= 1","            }","            return","        default:","            return","        }","    }","","    \/\/ Mapping for request ids from `index.leaf` template","    private enum LiveActionCall: String {","        case increment = \"increment\"","        case decrement = \"decrement\"","    }","}","","\/\/ MARK: Extension with unused required methods","extension IndexComponent {","    typealias Context = Never","    func contextSnapshot() -> Context? { nil }","    func loadFromContext(_ context: Never) { return }","}"],"type":"codeListing"},{"level":4,"text":"Configure","anchor":"Configure","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All we need to do now is to configure our app properly. Here I am serving private and public keys from "},{"type":"codeVoice","code":".env"},{"type":"text","text":" file placed in root directory."},{"type":"text","text":" "},{"code":"configure.swift","type":"codeVoice"},{"text":" file should look like this.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import Vapor","import TokamakVapor","import Leaf","import SwiftLiveView","","\/\/ configures your application","public func configure(_ app: Application) async throws {","    app.views.use(.leaf)","    app.middleware.use(WebsocketInitializer())","    app.middleware.use(FileMiddleware(publicDirectory: app.directory.publicDirectory))","","    let router = LiveRouter<String, ClientMessage> {","        \/\/ View that is rendered at invalid path request","        TokamakStaticHTML.StaticHTMLRenderer(InvalidPath()).render()","    } handleMessage: { router, request, message, socket in","        await router.passMessageToCurrentComponent(message, from: socket)","    }","    guard let privateKeySecret = Environment.get(\"PRIVATE\")?.base64Decoded(),","          let publicKeySecret = Environment.get(\"PUBLIC\")?.base64Decoded() else {","        fatalError(\"Could not read private or public key environment\")","    }","    \/\/ register routes","    app.setLiveViewHandler(","        LiveViewHandler<ClientMessage>(","            configuration: LiveViewHandlerConfiguration<ClientMessage>(","                app: app,","                router: router,","                privateKeySecret: privateKeySecret,","                publicKeySecret: publicKeySecret,","                onCloseStrategy: .deleteConnection(after: 10)) {","                [","                    IndexComponent(app: app, path: \"\/\")","                ]","            }","        )","    )","    try routes(app)","}","","public enum Action: String, Decodable {","    case live_action = \"live-action\"","}","","typealias ClientMessage = BaseClientMessage<Action>","","extension String {","    func base64Decoded() -> String? {","        guard let data = Data(base64Encoded: self) else { return nil }","        return String(data: data, encoding: .utf8)","    }","}"]},{"type":"heading","text":"Serve and enjoy","anchor":"Serve-and-enjoy","level":4},{"inlineContent":[{"text":"If you run the app now, you should see counter with two buttons. If you enter invalid ","type":"text"},{"type":"codeVoice","code":"URL"},{"text":" path, you will get our ","type":"text"},{"type":"codeVoice","code":"InvalidPath.swift"},{"text":" view serverd.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Not part of this tutorial, but I can highly recommend ","type":"text"},{"identifier":"https:\/\/fly.io","type":"reference","isActive":true},{"text":" for app deployment.","type":"text"}]}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/Component","doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/Router","doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/Handler","doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/Configuration"]}],"metadata":{"modules":[{"name":"SwiftLiveView"}],"roleHeading":"Article","title":"Hello world!","role":"article"},"kind":"article","sections":[],"references":{"https://github.com/usmansc/swiftliveview-demo?tab=readme-ov-file":{"type":"link","title":"here","titleInlineContent":[{"type":"text","text":"here"}],"identifier":"https:\/\/github.com\/usmansc\/swiftliveview-demo?tab=readme-ov-file","url":"https:\/\/github.com\/usmansc\/swiftliveview-demo?tab=readme-ov-file"},"doc://SwiftLiveView/documentation/SwiftLiveView/Configuration":{"title":"Configuration","type":"topic","url":"\/documentation\/swiftliveview\/configuration","role":"article","identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/Configuration","abstract":[{"type":"text","text":"Possible additional configuration optios for your "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView"},{"text":" app.","type":"text"}],"kind":"article"},"doc://SwiftLiveView/documentation/SwiftLiveView/LiveViewHandler":{"role":"symbol","navigatorTitle":[{"text":"LiveViewHandler","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Main handler for webSocket connections"}],"url":"\/documentation\/swiftliveview\/liveviewhandler","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LiveViewHandler"}],"title":"LiveViewHandler","identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/LiveViewHandler"},"https://fly.io":{"identifier":"https:\/\/fly.io","type":"link","titleInlineContent":[{"text":"FlyIO","type":"text"}],"url":"https:\/\/fly.io","title":"FlyIO"},"doc://SwiftLiveView/documentation/SwiftLiveView/Router":{"title":"Router","url":"\/documentation\/swiftliveview\/router","type":"topic","role":"article","identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/Router","abstract":[{"text":"Routing heart of every ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView"},{"type":"text","text":" app."}],"kind":"article"},"doc://SwiftLiveView/documentation/SwiftLiveView/Handler":{"role":"article","kind":"article","url":"\/documentation\/swiftliveview\/handler","type":"topic","identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/Handler","abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/LiveViewHandler"},{"type":"text","text":" is heart of every "},{"identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView","type":"reference","isActive":true},{"text":" framework.","type":"text"}],"title":"Handler"},"doc://SwiftLiveView/documentation/SwiftLiveView":{"kind":"symbol","identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView","type":"topic","title":"SwiftLiveView","abstract":[{"text":"Template language independent server side rendering framework written in Swift.","type":"text"}],"url":"\/documentation\/swiftliveview","role":"collection"},"https://kentakodashima.medium.com/generate-pem-keys-with-openssl-on-macos-ecac55791373":{"title":"this","type":"link","titleInlineContent":[{"text":"this","type":"text"}],"identifier":"https:\/\/kentakodashima.medium.com\/generate-pem-keys-with-openssl-on-macos-ecac55791373","url":"https:\/\/kentakodashima.medium.com\/generate-pem-keys-with-openssl-on-macos-ecac55791373"},"doc://SwiftLiveView/documentation/SwiftLiveView/Component":{"url":"\/documentation\/swiftliveview\/component","role":"article","identifier":"doc:\/\/SwiftLiveView\/documentation\/SwiftLiveView\/Component","type":"topic","abstract":[{"type":"text","text":"Representation of route state."}],"title":"Component","kind":"article"},"https://serverfault.com/a/706412":{"identifier":"https:\/\/serverfault.com\/a\/706412","type":"link","title":"this","titleInlineContent":[{"text":"this","type":"text"}],"url":"https:\/\/serverfault.com\/a\/706412"}}}